package model.user;

import com.google.gson.Gson;
import model.card.Card;
import org.mindrot.jbcrypt.BCrypt;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;


class UserException extends Exception {
    public final String errorMessage;

    UserException(String errorMessage) {
        this.errorMessage = errorMessage;
    }

    @Override
    public String toString() { // This is an standard format automatically generated by IntelliJ
        return "UserException{" +
                "errorMessage='" + errorMessage + '\'' +
                '}';
    }
}

class UserDatabase {
    private static final String USER_DATABASE_PATH = "./src/main/java/model/user/users/";

    static HashMap<String, User> updateAllUsers() {
        Gson gson = new Gson();
        HashMap<String, User> allUsers = new HashMap<>();

        File[] listOfFiles = new File(USER_DATABASE_PATH).listFiles();
        assert listOfFiles != null;

        Arrays.stream(listOfFiles)
                .filter(File::isFile)
                .filter(UserDatabase::isJsonFile)
                .forEach(file -> {
                    try {
                        BufferedReader reader = new BufferedReader(
                                new FileReader(USER_DATABASE_PATH + file.getName()));
                        User user = gson.fromJson(reader, User.class);
                        allUsers.put(user.getUsername(), user);

                    } catch (FileNotFoundException ignored) {
                    }
                });

        return allUsers;
    }

    private static boolean isJsonFile(File file) {
        String fileName = file.getName();
        int i = fileName.lastIndexOf('.');
        return i > 0 && fileName.substring(i + 1).equals("json");
    }

    static void removeUser(User user) throws UserException {
        if (!new File(USER_DATABASE_PATH + user.getUsername()).delete()) {
            throw new UserException("Couldn't remove the user in database.");
        }
    }

    static void updateUser(User user) throws UserException {
        try {
            Writer writer = new FileWriter(USER_DATABASE_PATH + user.getUsername() + ".json");
            new Gson().toJson(user, writer);
            writer.close();
        } catch (IOException e) {
            throw new UserException("Couldn't reach the database.");
        }
    }
}

public class User {
    private static HashMap<String, User> allUsers;
    private final String username;
    private String nickname;
    private String passwordHash;
    private int score;
    private int balance;
    private int level;
    private ArrayList<Deck> Decks;
    private ArrayList<Card> Cards;
    private Deck activeDeck;

    static {
        allUsers = UserDatabase.updateAllUsers();
    }

    public User(String username, String password, String nickName) throws UserException {
        this.username = username;
        this.nickname = nickName;
        this.passwordHash = hashString(password);
        this.score = 0;
        this.balance = 0;
        this.level = 1;

        updateInDatabase(); // This line may throw an exception
    }

    private String hashString(String rawString) {
        // Salt-hash the rawString using the BCrypt algorithm
        return BCrypt.hashpw(rawString, BCrypt.gensalt());
    }

    public boolean doesMatchPassword(String candidatePassword) {
        // Check if the candidate salted-hash matches the passwordHash
        return BCrypt.checkpw(candidatePassword, this.passwordHash);
    }

    public void removeUser() throws UserException {
        allUsers.remove(username); // TODO
        UserDatabase.removeUser(this);
    }

    public static User getUserByUsername(String username) {
        return allUsers.get(username);
    }

    public static HashMap<String, User> getAllUsers() {
        return allUsers;
    }

    public String getNickname() {
        return nickname;
    }

    public void setNickname(String nickname) throws UserException {
        this.nickname = nickname;
        updateInDatabase();
    }

    public void changePassword(String oldPassword, String newPassword) throws UserException {
        if (doesMatchPassword(oldPassword)) {
            this.passwordHash = hashString(newPassword);
            updateInDatabase();
            return;
        }
        throw new UserException("Entered password does not match the old password.");
    }

    public String getUsername() {
        return username;
    }

    public int getScore() {
        return score;
    }

    public void setScore(int score) throws UserException {
        this.score = score;
        updateInDatabase();
    }

    public int getBalance() {
        return balance;
    }

    public void setBalance(int balance) throws UserException {
        this.balance = balance;
        updateInDatabase();
    }

    public ArrayList<Deck> getDecks() {
        return Decks;
    }

    public void setDecks(ArrayList<Deck> decks) {
        Decks = decks;
    }

    public ArrayList<Card> getCards() {
        return Cards;
    }

    public void setCards(ArrayList<Card> cards) {
        Cards = cards;
    }

    public int getLevel() {
        return level;
    }

    public void setLevel(int level) throws UserException {
        this.level = level;
        updateInDatabase();
    }

    public Deck getActiveDeck() {
        return activeDeck;
    }

    public void setActiveDeck(Deck activeDeck) {
        this.activeDeck = activeDeck;
    }

    public void updateInDatabase() throws UserException {
        UserDatabase.updateUser(this);
    }
}
